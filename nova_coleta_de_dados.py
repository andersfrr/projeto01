# -*- coding: utf-8 -*-
"""Nova coleta de dados.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YN84WTmJn75dWNnz0YuGWnE8ICO22si_

# Importando os dados
"""

# abrir a conexão com o banco de dados
import sqlite3
import pandas as pd
conn = sqlite3.connect( "database.db" )

#consulta dos dados no banco de dados
#consulta_atividade = "SELECT * FROM Flight_activity LIMIT 10"
consulta_atividade = """

  SELECT
    *
  FROM flight_activity fa LEFT JOIN  flight_loyalty_history flh ON(fa.loyalty_number = flh.loyalty_number)

 """
df_atividade = pd.read_sql_query( consulta_atividade, conn)

df_atividade.head()

#fecha a conexão com o banco de dados
#conn.close()

"""#Inspecionando os dados"""

#verificar o numero de linhas de uma planilha de dados(dataframe)
df_atividade.shape[0]

#verificar o numero de colunas
df_atividade.shape[1]

#Insights iniciais da planilha de dados
#mostra as linhas, colunas, tipos(inteiro, flutuante...)
df_atividade.info()

#df_atividade.loc[linhas, colunas]. para selecionar todas as linhas use os dois pontos (:)
#soma das distancias:
soma_distancia = df_atividade.loc[:, "distance"].sum()
#media das distancias
distancia_media = df_atividade.loc[:, "distance"].mean()
#maior distancia
maior_distancia = df_atividade.loc[:, "distance"].max()
#menor distancia
menor_distancia = df_atividade.loc[:, "distance"].min()

#verificar quais dados são nulos. o false significa que não são nulos
df_atividade.isna()

"""#Preparação dos dados



"""

#numero de dados faltantes em cada coluna
df_atividade.isna().sum()

#selecionar somente as colunas que contem numeros
colunas = ["year", "month", "flights_booked", "flights_with_companions", "total_flights", "distance", "points_accumulated", "salary", "clv", "loyalty_card" ]
df_colunas_numericas = df_atividade.loc[:, colunas]

#remover as linhas que contem dados faltantes
df_dados_completos = df_colunas_numericas.dropna()

#verificar se existem dados faltantes
df_dados_completos.isna().sum()

df_dados_completos.shape[0]

"""#Machine Learning"""

from sklearn import tree as tr

X_atributos = df_dados_completos.drop(columns="loyalty_card")
y_rotulos = df_dados_completos.loc[:, "loyalty_card"]
#definição do algoritmo
modelo = tr.DecisionTreeClassifier(max_depth=5)

#treinamento do algoritmo
modelo_treinado = modelo.fit( X_atributos, y_rotulos)

tr.plot_tree(modelo_treinado, filled = True);

"""#Apresentando o resultado"""

X_novo = X_atributos.sample()
previsao = modelo_treinado.predict_proba(X_novo)

print("Prob - Aurora: {:.2f}% - Nova: {:.2f}% - Star: {:.2f}%".format(100*previsao[0] [0], 100*previsao[0] [1], 100*previsao[0] [2]))

"""#Painel de visualização"""

!pip install gradio

import gradio as gr
import numpy as np

def predict(*args):
  X_novo = np.array( [args] ).reshape( 1, -1 )
  previsao = modelo_treinado.predict_proba(X_novo)

  return{"Aurora":previsao[0][0], "Nova":previsao[0][1], "Star":previsao[0][2]}


with gr.Blocks() as demo:
  #Titulo do painel
  gr.Markdown(""" # Propensao de Compra """)

  with gr.Row():
    with gr.Column():
      gr.Markdown(""" # Atributos do Cliente """)
      year                              = gr.Slider(label="Year", minimum=2017, maximum=2018, step=1, randomize=True)
      month                             = gr.Slider(label="Month", minimum=1, maximum=12, step=1, randomize=True)
      flights_booked                    = gr.Slider(label="flights_booked", minimum=0, maximum=21, step=1, randomize=True)
      flights_with_companions           = gr.Slider(label="flights_with_companions", minimum=0, maximum=11, step=1, randomize=True)
      total_flights                     = gr.Slider(label="total_flights", minimum=0, maximum=32, step=1, randomize=True)
      distance                          = gr.Slider(label="distance", minimum=0, maximum=6293, step=1, randomize=True)
      points_accumulated                = gr.Slider(label="points_accumulated ", minimum=0.00, maximum=676.50, step=0.1, randomize=True)
      salary                            = gr.Slider(label="salary  ", minimum=58486.00, maximum=407228.00, step=0.1, randomize=True)
      clv                               = gr.Slider(label="clv", minimum=2119.89, maximum=83325.38, step=1, randomize=True)

      with gr.Row():
        gr.Markdown(""" # Botão previsão """)
        predict_btn = gr.Button(value="Previsao")

    with gr.Column():
      gr.Markdown(""" # Propensão de Compra do Cliente """)
      label = gr.Label()


  #Botão predict
  predict_btn.click(
      fn=predict,
      inputs=[
          year,
          month,
          flights_booked,
          flights_with_companions,
          total_flights,
          distance,
          points_accumulated,
          salary,
          clv
          ],
      outputs=[label] )


demo.launch(debug=True)